ggvis(~factor(ind), ~score) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~factor(score)) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars() %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
#layer_bars() %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(size=:4) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(size:=4) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(stroke:=4) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(stroke:=0.2) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(fill:=0.2) %>%
layer_points()
?layer_bars
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width:=0.2) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.2) %>%
layer_points()
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size=2)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size=12)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size:=12)
?layer_points
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size=12)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size=100)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.1) %>%
layer_points(size:=100)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width:=0.1) %>%
layer_points(size:=200)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width:=0.01) %>%
layer_points(size:=200)
predict.df[3:nrow(predict.df),] %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
f <- file("../../DSCapstoneProject_Data/Data/final/en_US/en_US.news.txt", "rb")
en_us.news <- readLines(f, encoding="UTF-8")
close(f)
sample.news <- en_us.news[sample(length(en_us.news), 100)]
object.size(sample.news)
save(sample.news, file="samplenews.RData")
sample.news[1]
sample.news[2]
sample.news[3]
sample.news[4]
sample.news
set.seed(123)
sample.news <- en_us.news[sample(length(en_us.news), 500)]
str_replace_all("\"I've always had a feminine side that I enjoyed expressing,\" she says. \"By creating this Donna Sachet character, I get to use that part of me to affect things.\"" , "\\\"", "")
sample.news <- str_replace_all(sample.news, "\\\"", "")
str_detect("123", "\d")
str_detect("123", "\\d")
str_detect("aadsfa 123", "\\d")
str_detect(c("aadsfa 123", "adf"), "\\d")
sample.news <- sample.news[!str_detect(sample.news, "\\d")]
length(sample.news)
set.seed(123)
sample.news <- en_us.news[sample(length(en_us.news), 500)]
sample.news <- str_replace_all(sample.news, "\\\"", "")
str_replace_all("Yes, council over the years has been frustrated by actions of the board. But they recognized the potential dangers inherent in an elected school board. Despite that frustration, and despite the fact that the county council had little influence on who is appointed to the board, they all felt the solution of an elected board would be worse. Most of my colleagues think an elected board would be acceptable — if that board had the responsibility of raising the revenue and defending tax rates to voters.", "^([^.|?|!]+)[^\n].", "\\1")
str_replace_all("Yes, council over the years has been frustrated by actions of the boardBut they recognized the potential dangers inherent in an elected school board. Despite that frustration, and despite the fact that the county council had little influence on who is appointed to the board, they all felt the solution of an elected board would be worse. Most of my colleagues think an elected board would be acceptable — if that board had the responsibility of raising the revenue and defending tax rates to voters.", "^([^.|?|!]+[.|?|!])[^\n]*", "\\1")
sample.news <- str_replace_all(sample.news, "^([^.|?|!]+[.|?|!])[^\n]*", "\\1")  # Keep the first sentence only
sample.news <- sample.news[!str_detect(sample.news, "\\d")]
length(sample.news)
nchar("Yes, council over the years has been frustrated by actions of the boardBut they recognized the potential dangers inherent in an elected school board.")
length(sample.news[nchar(sample.news)>100 & nchar(sample.news)<150])
length(sample.news[nchar(sample.news)>100 & nchar(sample.news)<160])
sample.news <- sample.news[nchar(sample.news)>100 & nchar(sample.news)<150]
save(sample.news, file="samplenews.RData")
sample.news
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
load(file="data/sample_news.RData")
shiny::runApp('~/GitHub/DSCapstoneProject/App')
?updateTextInput
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
predict.df %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df <- predict.df[3:nrow([predict.df), ])]
predict.df <- predict.df[3:nrow(predict.df), ]
predict.df %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df
predict.df %>%
ggvis(~factor(word), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
?factor
predict.df %>%
ggvis(~factor(word, levels=ind), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word=factor(word, levels=ind)) %>%
ggvis(~word, ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word=factor(word, levels=ind))
predict.df %>%
mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind))
str(predict.df)
predict.df$word <- as.character(predict.df$word)
str(predict.df)
predict.df %>%
mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind)) %>%
ggvis(~word, ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
#mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind)) %>%
ggvis(~factor(ind), ~score) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
#mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind)) %>%
ggvis(~factor(ind), ~score) %>%
add_axis("x", title = "input$title") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
#mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind)) %>%
ggvis(~factor(ind), ~score) %>%
add_axis("x", labels=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
#mutate(word.to.predict=factor(predict.df$word, levels=predict.df$ind)) %>%
ggvis(~factor(ind), ~score) %>%
add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~factor(word.to.predict), ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep="."))
predict.df %>%
mutate(word.to.predict=factor(paste(predict.df$ind, predict.df$word, sep="."))) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=as.factor(paste(predict.df$ind, predict.df$word, sep="."))) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=as.factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind)) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
?as.factor
predict.df %>%
mutate(word.to.predict=factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind)) %>%
ggvis(~word.to.predict, ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind)
factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind))
factor(paste(predict.df$ind, predict.df$word, sep="."))
factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind)
factor(paste(predict.df$ind, predict.df$word, sep="."), levels=(predict.df$ind-2))
a <- factor(paste(predict.df$ind, predict.df$word, sep="."))
a
predict.df %>%
#mutate(word.to.predict=factor(paste(predict.df$ind, predict.df$word, sep="."), levels=predict.df$ind)) %>%
ggvis(~reorder(word, ind), ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
#add_axis("x", values=predict.df$word, title="Word to predict") %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis(labels = list(angle=45, align="right")) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", properties = axis_props(labels = list(angle=45, align="right"))) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", properties = axis_props(labels = list(angle=-45, align="left"))) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", properties = axis_props(labels = list(angle=-45, align="right"))) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-45, align="right"))) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=".")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-45, align="right"))) %>%
add_axis("y", tick_size_major=1, tick_size_minor=1) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-45, align="right"))) %>%
add_axis("y", tick_size_major=1, tick_size_minor=1) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-30, align="right"))) %>%
add_axis("y", tick_size_major=1, tick_size_minor=1) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-30, align="right"))) %>%
add_axis("y", subdivide = 1, values = 0:5) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-30, align="right"))) %>%
add_axis("y", subdivide = 1, values = 0:15) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-30, align="right"))) %>%
add_axis("y", subdivide = 0, values = 0:5) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200)
predict.df
predict.df %>%
mutate(word.to.predict=paste(predict.df$ind, predict.df$word, sep=". ")) %>%
ggvis(~reorder(word.to.predict, ind), ~score) %>%
add_axis("x", title = "", properties = axis_props(labels = list(angle=-30, align="right"))) %>%
add_axis("y", subdivide = 0, values = 0:5) %>%
layer_bars(width=0.05) %>%
layer_points(size:=200) %>%
add_tooltip(function(predict.df) df$predict.1)
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
predict.df
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
paste(1:4, 2:8)
paste(1:4, 2:8, sep=",")
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
(1:4) == 1
mtcar[1, 1:4]
mtcars[1, 1:4]
as.character(mtcars[1, 1:4])
as.vector(mtcars[1, 1:4])
class(mtcars[1, 1:4])
class(mtcars[1, 1:4]) == 21
as.vector(mtcars[1, 1:4]) == "21"
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
mtcars[1, 1]
mtcars[1, 1] in mtcars[1, 1:4]
mtcars[1, 1] %in% mtcars[1, 1:4]
row <- mtcars[1,]
row[which(as.vector(row[2:7])==as.vector(row[2]))]
which(as.vector(row[2:7])==as.vector(row[2]))
as.vector(row[2:7])==as.vector(row[2])
(row[2:7]
)
as.vector(row[2:7])
as.vector(row[2])
which(as.vector(row[2:7])==6)
which(as.vector(row[2:7])==160)
as.vector(row[2])
class(as.vector(row[2]))
row[, 2]
as.vector(row[2:7])==row[, 2]
shiny::runApp('~/GitHub/DSCapstoneProject/App')
class(row[, 3:78])
class(row[, 3:7])
class(row[, 3])
class(as.vector(row[, 3:7]))
unlist(row[, 3:7])
class(v)
class(unlist(row[, 3:7]))
class(row[, 2])
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
shiny::runApp('~/GitHub/DSCapstoneProject/App')
Predict.Phrase("This Shiny")
phrase <- "This Shiny"
phrase.tr <- as.character((VCorpus(VectorSource(phrase)) %>% CorpusPreprocess())[[1]])
phrase.tr
words <- strsplit(phrase.tr, " ")[[1]] %>%
str_replace_all("[,|.|?|!]", "")
words
prediction <- data_frame(ind=1:length(words), word=words[1:length(words)], predict.1=NA, predict.2=NA, predict.3=NA, predict.4=NA, predict.5=NA, score=NA)
prediction
Predict.Word("This", "Shiny")
shiny::runApp('~/GitHub/DSCapstoneProject/App')
class(dt.1gram$word)
shiny::runApp('~/GitHub/DSCapstoneProject/App')
dt.1gram$word[!dt.1gram$word %in% pred.3gram$word & !dt.1gram$word %in% pred.2gram$word][1:(5-length(unique(c(pred.3gram$word, pred.2gram$word))))])
Predict.Word <- function(word.1, word.2){
pred.3gram <- dt.3gram[key==paste(word.1, word.2)]
if(nrow(pred.3gram) < 5){
pred.2gram <- dt.2gram[key==word.2]
if((length(unique(c(pred.3gram$word, pred.2gram$word)))) < 5){
result <- c(pred.3gram$word,
pred.2gram$word[!pred.2gram$word %in% pred.3gram$word],
dt.1gram$word[!dt.1gram$word %in% pred.3gram$word & !dt.1gram$word %in% pred.2gram$word][1:(5-length(unique(c(pred.3gram$word, pred.2gram$word))))])
}else{
result <- c(pred.3gram$word, pred.2gram$word[!pred.2gram$word %in% pred.3gram$word][1:(5-nrow(pred.3gram))])
}
}else{
result <- pred.3gram$word[1:5]
}
return(result)
}
Predict.Word("This", "Shiny")
shiny::runApp('~/GitHub/DSCapstoneProject/App')
load(file="data/gram_dt.RData")
load(file="data/gram_dt.RData")
setwd("~/GitHub/DSCapstoneProject/App")
load(file="data/gram_dt.RData")
print(Predict.Word("This", "Shiny"))
class(dt.1gram)
str(dt.1gram)
str(dt.2gram)
merged.1gram <- merged.1gram[str_detect(names(merged.1gram), "^[A-z]+$")]
merged.1gram <- sort(merged.1gram, decreasing=TRUE)[1:100]
dt.1gram <- data.table(data_frame(key=names(merged.1gram), word=names(merged.1gram), count=merged.1gram))
setkey(dt.1gram, key)
save(dt.1gram, dt.2gram, dt.3gram, file="data/gram_dt.RData")
load(file="data/gram_dt.RData")
print(Predict.Word("This", "Shiny"))
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library("shinyapps")
shinyapps::setAccountInfo(name='lifan', token='DADC8CB80EF16FAFB5BD312A04DB8E18', secret='Wy4pUCJUisZ650PQgnw4UJXmlcDyay0nxy7mml0P')
setwd("~/GitHub/DSCapstoneProject/App")
runApp()
deployApp()
setwd("~/GitHub/DSCapstoneProject/App")
deployApp()
setwd("~/GitHub/DSCapstoneProject/TextPredictApp")
library(shinyapps )
library("shinyapps")
deployApp()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
deployApp()
library("shinyapps")
deployApp()
library("shinyapps")
shinyapps::setAccountInfo(name='lifan', token='DADC8CB80EF16FAFB5BD312A04DB8E18', secret='Wy4pUCJUisZ650PQgnw4UJXmlcDyay0nxy7mml0P')
setwd("~/GitHub/DSCapstoneProject/TextPredictApp")
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
shinyapps::showLogs()
shiny::runApp()
deployApp()
shinyapps::showLogs()
deployApp()
setwd("~/GitHub/DSCapstoneProject/RMD")
f <- file("../../DSCapstoneProject_Data/Data/final/en_US/en_US.news.txt", "rb")
en_us.news <- readLines(f)
close(f)
length(en_us.news)
summary(nchar(en_us.news))
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
