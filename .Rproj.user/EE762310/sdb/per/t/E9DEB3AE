{
    "contents" : "library(tm)\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(ggvis)\nlibrary(data.table)\n\n\n\nload(file=\"data/gram_dt.RData\")\nload(file=\"data/sample_news.RData\")\n\n# Helper function to preprocess corpus\nCorpusPreprocess <- function(corpus){\n  toSpace <- content_transformer(function(x, pattern) gsub(pattern, \" \", x))\n  processed.corpus <- corpus %>%\n    tm_map(toSpace, \"/|@|\\\\|()\\\"\") %>%\n    #tm_map(content_transformer(tolower)) %>%\n    tm_map(removeNumbers) %>%\n    #tm_map(removePunctuation) %>%\n    tm_map(stripWhitespace)\n  return(processed.corpus)\n}\n\n# Helper function to generate prediction result\nPredict.Word <- function(word.1, word.2){\n  pred.3gram <- dt.3gram[key==paste(word.1, word.2)]\n  \n  if(nrow(pred.3gram) < 5){\n    pred.2gram <- dt.2gram[key==word.2]\n    if((length(unique(c(pred.3gram$word, pred.2gram$word)))) < 5){\n      result <- c(pred.3gram$word, \n                  pred.2gram$word[!pred.2gram$word %in% pred.3gram$word], \n                  dt.1gram$word[!dt.1gram$word %in% pred.3gram$word & !dt.1gram$word %in% pred.2gram$word][1:(5-length(unique(c(pred.3gram$word, pred.2gram$word))))])\n    }else{\n      result <- c(pred.3gram$word, pred.2gram$word[!pred.2gram$word %in% pred.3gram$word][1:(5-nrow(pred.3gram))])\n    }\n  }else{\n    result <- pred.3gram$word[1:5]\n  }\n  return(result)\n}\n\n# Helper function to continuously predict a whole phrase\nPredict.Phrase <- function(phrase){\n  phrase.tr <- as.character((VCorpus(VectorSource(phrase)) %>% CorpusPreprocess())[[1]])\n  words <- strsplit(phrase.tr, \" \")[[1]] %>%\n    str_replace_all(\"[,|.|?|!]\", \"\")\n  prediction <- data.frame(ind=1:length(words), word=words[1:length(words)], predict.1=NA, predict.2=NA, predict.3=NA, predict.4=NA, predict.5=NA, score=NA, stringsAsFactors=FALSE)\n  \n  for(i in 3:length(words)){\n    #print(i)\n    result <- Predict.Word(words[i-2], words[i-1])\n    prediction[i, 3:7] <- result\n    if(words[i] %in% result){\n      prediction[i, 8] <- 6-which(result==words[i]) \n    }else{\n      prediction[i, 8] <- 0\n    }\n  }\n  return(prediction)\n}\n\n# Helper function to add tooltip for ggvis\n\n#print(Predict.Word(\"This\", \"Shiny\"))\n\nshinyServer(function(input, output, session) {\n  output$singlePredict <- renderPrint({\n    input$submitButton1\n    entry <- isolate(input$entry1)\n    if(entry==\"\"){\n      return(NULL)\n    }\n    entry.tr <- as.character((VCorpus(VectorSource(entry)) %>% CorpusPreprocess())[[1]])\n    words <- strsplit(entry.tr, \" \")[[1]] %>%\n      str_replace_all(\"[,|.|?|!]\", \"\")\n\n    predict <- Predict.Word(words[length(words)-1], words[length(words)])\n    return(paste0(\"Prediction: \", paste0(1:5, \".\", predict, collapse=\", \")))\n  })\n  \n  observe({\n    input$submitButton3\n    random.news <- sample(sample.news, 1)\n    updateTextInput(session, \"entry2\", value = random.news)\n  })\n  \n  predict.df <- reactive({\n    input$submitButton2\n    entry <- isolate(input$entry2)\n    predict.df <- Predict.Phrase(entry)\n    return(predict.df[3:nrow(predict.df),])\n  })\n  \n  \n  reactive({\n    df <- predict.df()\n    df$word.to.predict <- paste(df$ind, df$word, sep=\". \")\n    df %>%\n    ggvis(~reorder(word.to.predict, ind), ~score) %>%\n    #  ggvis(~ind, ~score) %>%\n    add_axis(\"x\", title = \"\", properties = axis_props(labels = list(angle=-30, align=\"right\"))) %>%\n    add_axis(\"y\", subdivide = 0, values = 0:5) %>%\n    layer_bars(width=0.05) %>%\n    layer_points(size:=200, key := ~ind) %>%\n    add_tooltip(all_predictions, \"hover\")}) %>%\n    bind_shiny(\"plot\")\n  \n  all_predictions <- function(x) {\n    if(is.null(x)) return(NULL)\n    if(is.null(x$ind)) return(NULL)\n    df <- predict.df()\n    row <- df[df$ind == x$ind, ]\n    #print(row)\n    if(row[, 2] %in% unlist(row[, 3:7])){\n      match.row <- which(unlist(row[, 3:7])==row[,2])+2\n      row[match.row] <- paste0(\"<font color='red'>\", row[match.row], \"</font>\")\n    }\n    #print(row)\n    paste0(1:5, \": \", row[3:7], collapse = \"<br />\")\n  }\n  \n  \n})\n\n\n\n\n\n\n",
    "created" : 1418575698024.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1294668586",
    "id" : "E9DEB3AE",
    "lastKnownWriteTime" : 1418576263,
    "path" : "~/GitHub/DSCapstoneProject/TextPredictApp/server.R",
    "project_path" : "TextPredictApp/server.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}